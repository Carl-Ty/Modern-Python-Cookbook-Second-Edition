"""Python Cookbook

Chapter 4, Examples from the text.
"""

# Lines 36 to 38
>>> valid_inputs = {"yes", "y", "no", "n"}
>>> valid_inputs.add("y")
>>> valid_inputs == {'yes', 'no', 'n', 'y'}
True

# Lines 44 to 44
>>> month_name_list = ["Jan", "Feb", "Mar", "Apr",
...    "May", "Jun", "Jul", "Aug",
...    "Sep", "Oct", "Nov", "Dec"]

# Lines 47 to 49
>>> month_name_list[8]
'Sep'
>>> month_name_list.index("Feb")
1

# Lines 56 to 56
>>> scheme = {"Crimson": (220, 14, 60),
... "DarkCyan": (0, 139, 139),
... "Yellow": (255, 255, 00)}

# Lines 59 to 59
>>> scheme['Crimson']
(220, 14, 60)

# Lines 103 to 105
>>> import pathlib
>>> home = pathlib.Path.cwd()
>>> for path in home.glob('data/*.csv'):
...     print(path.stat().st_size, path.name)
1790 wc1.csv
1790 wc.csv
29 test.csv
215 sample.csv
45 craps.csv
28 output.csv
225 fuel.csv
166 waypoints.csv
412 summary_log.csv
156 fuel2.csv


# Lines 134 to 141
>>> file_sizes = []

>>> home = pathlib.Path.cwd()
>>> for path in home.glob('data/*.csv'):
...     file_sizes.append(path.stat().st_size)
>>> print(file_sizes)
[1790, 1790, 29, 215, 45, 28, 225, 166, 412, 156]
>>> print(sum(file_sizes))
4856

# Lines 164 to 164
>>> [path.stat().st_size
...    for path in home.glob('data/*.csv')]
[1790, 1790, 29, 215, 45, 28, 225, 166, 412, 156]


# Lines 176 to 176
>>> list(path.stat().st_size
...    for path in home.glob('data/*.csv'))
[1790, 1790, 29, 215, 45, 28, 225, 166, 412, 156]


# Lines 187 to 196
>>> sizes = list(path.stat().st_size
...    for path in home.glob('data/*.csv'))
>>> sum(sizes)
4856
>>> max(sizes)
1790
>>> min(sizes)
28
>>> from statistics import mean
>>> round(mean(sizes), 3)
485.6

# Lines 199 to 199
>>> sizes.index(min(sizes))
5

# Lines 204 to 215
>>> ch1 = list(path.stat().st_size
...    for path in home.glob('Chapter_01/*.py'))
>>> ch2 = list(path.stat().st_size
...    for path in home.glob('Chapter_02/*.py'))
>>> len(ch1)
1
>>> len(ch2)
2
>>> final = ch1 + ch2
>>> len(final)
3
>>> sum(final)
1119

# Lines 219 to 224
>>> final_ex = []
>>> final_ex.extend(ch1)
>>> final_ex.extend(ch2)
>>> len(final_ex)
3
>>> sum(final_ex)
1119

# Lines 228 to 233
>>> p = [3, 5, 11, 13]
>>> p.insert(0, 2)
>>> p
[2, 3, 5, 11, 13]
>>> p.insert(3, 7)
>>> p
[2, 3, 5, 7, 11, 13]

# Chapter 4, Recipe 3.

# Lines 281 to 283
>>> from pathlib import Path
>>> import csv
>>> with Path('data/fuel.csv').open() as source_file:
...    reader = csv.reader(source_file)
...    log_rows = list(reader)

# Lines 286 to 288
>>> log_rows[0]
['date', 'engine on', 'fuel height']
>>> log_rows[-1]
['', "choppy -- anchor in jackson's creek", '']

# Lines 296 to 303
>>> head, tail = log_rows[:4], log_rows[4:]
>>> head[0]
['date', 'engine on', 'fuel height']
>>> head[-1]
['', '', '']
>>> tail[0]
['10/25/13', '08:24:00 AM', '29']
>>> tail[-1]
['', "choppy -- anchor in jackson's creek", '']

# Lines 308 to 308
>>> tail[0::3]
[['10/25/13', '08:24:00 AM', '29'], ['10/26/13', '09:12:00 AM', '27']]

# Lines 311 to 311
>>> tail[1::3]
[['', '01:15:00 PM', '27'], ['', '06:25:00 PM', '22']]

# Lines 314 to 314
>>> list( zip(tail[0::3], tail[1::3]) ) 
[(['10/25/13', '08:24:00 AM', '29'], ['', '01:15:00 PM', '27']), (['10/26/13', '09:12:00 AM', '27'], ['', '06:25:00 PM', '22'])]

# Lines 322 to 323
>>> paired_rows = list( zip(tail[0::3], tail[1::3]) )
>>> [a+b for a,b in paired_rows] 
[['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27'], ['10/26/13', '09:12:00 AM', '27', '', '06:25:00 PM', '22']]

# Lines 386 to 388
>>> from pathlib import Path
>>> import csv
>>> with Path('data/fuel.csv').open() as source_file:
...    reader = csv.reader(source_file)
...    log_rows = list(reader)

# Lines 391 to 393
>>> log_rows[0]
['date', 'engine on', 'fuel height']
>>> log_rows[-1]
['', "choppy -- anchor in jackson's creek", '']

# Lines 406 to 411
>>> tail = log_rows.copy()
>>> del tail[:4]
>>> tail[0]
['10/25/13', '08:24:00 AM', '29']
>>> tail[-1]
['', "choppy -- anchor in jackson's creek", '']

# Lines 417 to 420
>>> row = ['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27']
>>> row.remove('')
>>> row
['10/25/13', '08:24:00 AM', '29', '01:15:00 PM', '27']

# Lines 433 to 440
>>> row = ['10/25/13', '08:24:00 AM', '29', '', '01:15:00 PM', '27']
>>> target_position = row.index('')
>>> target_position
3
>>> row.pop(target_position)
''
>>> row
['10/25/13', '08:24:00 AM', '29', '01:15:00 PM', '27']

# Lines 450 to 450
>>> def number_column(row, column=2):
...    try:
...        float(row[column])
...        return True
...    except ValueError:
...        return False

# Lines 458 to 463
>>> tail_rows = list(filter(number_column, log_rows))
>>> len(tail_rows)
4
>>> tail_rows[0]
['10/25/13', '08:24:00 AM', '29']
>>> tail_rows[-1]
['', '06:25:00 PM', '22']

# Lines 471 to 472
>>> row = ['', '06:25:00 PM', '22']
>>> del row[3]
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[80]>", line 1, in <module>
    del row[3]
IndexError: list assignment index out of range

# Lines 480 to 484
>>> data_items = [1, 1, 2, 3, 5, 8, 10,
...    13, 21, 34, 36, 55]
>>> for f in data_items:
...    if f%2 == 0: data_items.remove(f)
>>> data_items
[1, 1, 3, 5, 10, 13, 21, 36, 55]

# Lines 494 to 497
>>> data_items = [1, 1, 2, 3, 5, 8, 10,
...    13, 21, 34, 36, 55]
>>> position = 0
>>> while position != len(data_items):
...    f = data_items[position]
...    if f%2 == 0:
...        data_items.remove(f)
...    else:
...        position += 1

# Lines 503 to 503
>>> data_items
[1, 1, 3, 5, 13, 21, 55]

# Lines 528 to 534
>>> week = 13
>>> day = 2
>>> hour = 7
>>> minute = 53
>>> second = 19
>>> t_s = (((week*7+day)*24+hour)*60+minute)*60+second
>>> t_s
8063599

# Lines 541 to 543
>>> t_s = 8063599
>>> fields = []
>>> for b in 60, 60, 24, 7:
...    t_s, f = divmod(t_s, b)
...    fields.append(f)

# Lines 546 to 547
>>> fields.append(t_s)
>>> fields
[19, 53, 7, 2, 13]

# Lines 553 to 555
>>> fields_copy1 = fields.copy()
>>> fields_copy1.reverse()
>>> fields_copy1
[13, 2, 7, 53, 19]

# Lines 560 to 561
>>> fields_copy2 = fields[::-1]
>>> fields_copy2
[13, 2, 7, 53, 19]

# Lines 589 to 590
>>> import random
>>> def arrival1(n=8):
...     while True:
...         yield random.randrange(n)

# Lines 595 to 595
>>> def samples(limit, generator):
...     for n, value in enumerate(generator):
...         if n == limit: break
...         yield value

# Lines 601 to 602
>>> random.seed(1)
>>> list(samples(10, arrival1()))
[2, 1, 4, 1, 7, 7, 7, 6, 3, 1]

# Lines 607 to 608
>>> from fractions import Fraction
>>> def expected(n=8):
...     return n * sum(Fraction(1,(i+1)) for i in range(n))

# Lines 611 to 613
>>> expected(8)
Fraction(761, 35)
>>> round(float(expected(8)))
22

# Lines 647 to 649
>>> collection = set()
>>> collection.add(1)
>>> collection
{1}

# Lines 652 to 655
>>> collection.add(1)
>>> collection
{1}
>>> 1 in collection
True

# Lines 666 to 671
>>> collection
{1}
>>> item = 3
>>> collection.union( {item} )
{1, 3}
>>> collection
{1}

# Lines 676 to 677
>>> collection = collection | {item}
>>> collection
{1, 3}

# Lines 681 to 682
>>> collection.update( {4} )
>>> collection
{1, 3, 4}

# Lines 697 to 697
>>> log = '''
... [2016-03-05T09:29:31-05:00] INFO: Processing ruby_block[print IP] action run (@recipe_files::/home/slott/ch4/deploy.rb line 9)
... [2016-03-05T09:29:31-05:00] INFO: Installed IP: 111.222.111.222
... [2016-03-05T09:29:31-05:00] INFO: ruby_block[print IP] called
...
...  - execute the ruby block print IP
... [2016-03-05T09:29:31-05:00] INFO: Chef Run complete in 23.233811181 seconds
...
... Running handlers:
... [2016-03-05T09:29:31-05:00] INFO: Running report handlers
... Running handlers complete
... [2016-03-05T09:29:31-05:00] INFO: Report handlers complete
... Chef Client finished, 2/2 resources updated in 29.233811181 seconds
... '''

# Lines 713 to 716
>>> import re
>>> pattern = re.compile(r"IP: \d+\.\d+\.\d+\.\d+")
>>> matches = set( pattern.findall(log) )
>>> matches
{'IP: 111.222.111.222'}

# Lines 722 to 728
>>> to_be_ignored = {'IP: 0.0.0.0', 'IP: 1.2.3.4'}
>>> matches = {'IP: 111.222.111.222', 'IP: 1.2.3.4'}
>>> matches - to_be_ignored
{'IP: 111.222.111.222'}
>>> matches.difference(to_be_ignored)
{'IP: 111.222.111.222'}

# Lines 732 to 733
>>> valid_matches = matches - to_be_ignored
>>> valid_matches
{'IP: 111.222.111.222'}

# Lines 747 to 749
>>> valid_matches = matches.copy()
>>> valid_matches.difference_update( to_be_ignored )
>>> valid_matches
{'IP: 111.222.111.222'}

# Lines 754 to 755
>>> valid_matches = matches.copy()
>>> for item in to_be_ignored:
...    if item in valid_matches:
...        valid_matches.remove(item)

# Lines 758 to 758
>>> valid_matches
{'IP: 111.222.111.222'}

# Lines 772 to 772
>>> def arrival2(n=8):
...     p = 0
...     while True:
...         step = random.choice([-1,0,+1])
...         p += step
...         yield abs(p) % n


# Lines 780 to 783
>>> import random
>>> from Chapter_04.ch04_r06 import samples, arrival2
>>> random.seed(1)
>>> list( samples(10, arrival2(8)) )
[1, 0, 1, 1, 2, 2, 2, 2, 1, 1]

# Lines 828 to 829
>>> from collections import Counter
>>> def summarize_4(source):
...    histogram = Counter(source)
...    return histogram


# Lines 834 to 838
>>> import random
>>> from pprint import pprint
>>> random.seed(1)
>>> histogram = summarize_4(samples(1000, arrival2(8)))
>>> pprint(histogram)
Counter({1: 150, 0: 130, 2: 129, 4: 128, 5: 127, 6: 118, 3: 117, 7: 101})

# Lines 842 to 842
>>> for key in sorted(histogram):
...    print(key, histogram[key])
0 130
1 150
2 129
3 117
4 128
5 127
6 118
7 101


# Lines 927 to 930
>>> from pathlib import Path
>>> import csv
>>> data_path = Path('data/craps.csv')
>>> with data_path.open() as data_file:
...     reader = csv.DictReader(data_file)
...     data = list(reader)

# Lines 933 to 933
>>> for row in data: 
...    print(row)
{'final': '5', 'least': '0', 'most': '6'}
{'final': '-3', 'least': '-4', 'most': '0'}
{'final': '-1', 'least': '-3', 'most': '1'}
{'final': '3', 'least': '0', 'most': '4'}

# Lines 952 to 953
>>> from collections import OrderedDict
>>> with data_path.open() as data_file:
...     reader = csv.DictReader(data_file)
...     for raw_row in reader:
...         column_sequence = ((name, raw_row[name])
...            for name in reader.fieldnames)
...         good_row = OrderedDict(column_sequence)
...         print(good_row)
OrderedDict([('final', '5'), ('least', '0'), ('most', '6')])
OrderedDict([('final', '-3'), ('least', '-4'), ('most', '0')])
OrderedDict([('final', '-1'), ('least', '-3'), ('most', '1')])
OrderedDict([('final', '3'), ('least', '0'), ('most', '4')])

# Lines 983 to 983
>>> {"Poe", "E", "Near", "A", "Raven"}  # doctest: +SKIP
{'E', 'Poe', 'Raven', 'Near', 'A'}

# Lines 989 to 989
>>> words = set(
... '''Beautiful is better than ugly.
... Explicit is better than implicit.
... Simple is better than complex.
... Complex is better than complicated.
... '''.replace('.', ' ').split())

# Lines 995 to 995
>>> words == {'is', 'Simple', 'Complex', 'better', 'than', 'complicated', 'Beautiful', 'complex', 'implicit', 'ugly', 'Explicit'}
True

# Lines 1007 to 1007
>>> list(sorted(words)) # doctest: +ELLIPSIS
['Beautiful', 'Complex', 'Explicit', 'Simple', 'better', ...

# Lines 1037 to 1038
>>> mutable = [1, 1, 2, 3, 5, 8]
>>> immutable = (5, 8, 13, 21)

# Lines 1043 to 1044
>>> mutable_b = mutable
>>> immutable_b = immutable


# Lines 1047 to 1049
>>> mutable_b is mutable
True
>>> immutable_b is immutable
True

# Lines 1052 to 1052
>>> mutable += [mutable[-2] + mutable[-1]]

# Lines 1055 to 1055
>>> immutable += (immutable[-2] + immutable[-1],)

# Lines 1058 to 1064
>>> mutable_b
[1, 1, 2, 3, 5, 8, 13]
>>> mutable is mutable_b
True
>>> immutable_b
(5, 8, 13, 21)
>>> immutable
(5, 8, 13, 21, 34)

# Lines 1079 to 1082
>>> a = 355
>>> a += 113
>>> a = a + 113

# Lines 1105 to 1108
>>> some_dict = {'a': [1, 1, 2, 3]}
>>> another_dict = some_dict.copy()
>>> another_dict
{'a': [1, 1, 2, 3]}

# Lines 1111 to 1112
>>> some_dict['a'].append(5)
>>> another_dict
{'a': [1, 1, 2, 3, 5]}

# Lines 1116 to 1116
>>> id(some_dict['a']) == id(another_dict['a'])
True

# Lines 1120 to 1124
>>> some_list = [[2, 3, 5], [7, 11, 13]]
>>> another_list = some_list.copy()
>>> some_list is another_list
False
>>> some_list[0] is another_list[0]
True

# Lines 1132 to 1140
>>> import copy
>>> some_dict = {'a': [1, 1, 2, 3]}
>>> another_dict = copy.deepcopy(some_dict)
>>> some_dict['a'].append(5)
>>> some_dict
{'a': [1, 1, 2, 3, 5]}
>>> another_dict
{'a': [1, 1, 2, 3]}

# Lines 1143 to 1143
>>> id(some_dict['a']) == id(another_dict['a'])
False

# Lines 1148 to 1149
>>> copy_of_list = [item for item in some_list]
>>> copy_of_dict = {key:value for key, value in some_dict.items()}

# Lines 1174 to 1176
>>> from collections import Counter
>>> from random import randint, seed
>>> def gather_stats(n, samples=1000, summary=Counter()):
...     summary.update(
...         sum(randint(1,6) for d in range(n))
...             for _ in range(samples))
...     return summary

# Lines 1182 to 1184
>>> seed(1)
>>> s1 = gather_stats(2)
>>> s1
Counter({7: 168, 6: 147, 8: 136, 9: 114, 5: 110, 10: 77, 11: 71, 4: 70, 3: 52, 12: 29, 2: 26})

# Lines 1187 to 1191
>>> seed(1)
>>> mc = Counter()
>>> gather_stats(2, summary=mc)  # doctest: +ELLIPSIS
Counter...
>>> mc
Counter({7: 168, 6: 147, 8: 136, 9: 114, 5: 110, 10: 77, 11: 71, 4: 70, 3: 52, 12: 29, 2: 26})

# Lines 1196 to 1198
>>> seed(1)
>>> s3 = gather_stats(2)
>>> s3
Counter({7: 336, 6: 294, 8: 272, 9: 228, 5: 220, 10: 154, 11: 142, 4: 140, 3: 104, 12: 58, 2: 52})

# Lines 1202 to 1202
>>> s1 is s3
True

# Lines 1206 to 1206
>>> s1
Counter({7: 336, 6: 294, 8: 272, 9: 228, 5: 220, 10: 154, 11: 142, 4: 140, 3: 104, 12: 58, 2: 52})

# Lines 1243 to 1243
>>> def gather_stats(n, samples=1000, summary_func=lambda x:Counter(x)):
...     summary = summary_func(
...         sum(randint(1,6) for d in range(n))
...             for _ in range(samples))
...     return summary


# Lines 1250 to 1251
>>> seed(1)
>>> gather_stats(2, 12, summary_func=list)
[7, 4, 5, 8, 10, 3, 5, 8, 6, 10, 9, 7]

