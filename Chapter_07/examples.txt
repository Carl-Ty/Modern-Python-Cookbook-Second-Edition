"""Python Cookbook

Chapter 7, Examples from the text.
"""

# Lines 32 to 36
>>> from collections import namedtuple
>>> Card = namedtuple('Card', ('rank', 'suit'))
>>> SUITS = '\u2660\u2661\u2662\u2663'
>>> Spades, Hearts, Diamonds, Clubs = SUITS
>>> Card(2, Spades)
Card(rank=2, suit='♠')

# Lines 79 to 80
>>> domain = list(Card(r+1,s) for r in range(13) for s in SUITS)
>>> len(domain)
52

# Lines 83 to 89
>>> import random
>>> from Chapter_07.ch07_r01 import Deck_W
>>> d = Deck_W(domain)

>>> random.seed(1)
>>> d.shuffle()
>>> [d.deal() for _ in range(5)] 
[Card(rank=13, suit='♡'), Card(rank=3, suit='♡'), Card(rank=10, suit='♡'), Card(rank=6, suit='♢'), Card(rank=1, suit='♢')]

# Lines 117 to 119
>>> from Chapter_07.ch07_r01 import Deck_X
>>> d2 = Deck_X(Card(r+1,s) for r in range(13) for s in SUITS)
>>> len(d2)
52

# Lines 124 to 126
>>> random.seed(1)
>>> d2.shuffle()
>>> [d2.deal() for _ in range(5)] 
[Card(rank=13, suit='♡'), Card(rank=3, suit='♡'), Card(rank=10, suit='♡'), Card(rank=6, suit='♢'), Card(rank=1, suit='♢')]

# Lines 155 to 159
>>> c_2s = Card(2, Spades)
>>> c_2s
Card(rank=2, suit='♠')
>>> another = c_2s
>>> another
Card(rank=2, suit='♠')

# Lines 243 to 250
>>> from Chapter_07.ch07_r02 import make_cribbage_card, SUITS
>>> import random
>>> random.seed(1)
>>> deck = [make_cribbage_card(rank+1, suit) for rank in range(13) for suit in SUITS]
>>> random.shuffle(deck)
>>> len(deck)
52
>>> deck[:5]
[ K ♡,  3 ♡, 10 ♡,  6 ♢,  A ♢]

# Lines 255 to 255
>>> sum(c.points() for c in deck[:5])
30

# Lines 264 to 269
>>> c = deck[5]
>>> c
10 ♢
>>> c.__class__.__name__
'CribbageCard'
>>> c.__class__.mro() 
[<class 'Chapter_07.ch07_r02.CribbageCard'>, <class 'Chapter_07.ch07_r02.Card'>, <class 'Chapter_07.ch07_r02.CribbagePoints'>, <class 'Chapter_07.ch07_r02.PointedCard'>, <class 'typing.Protocol'>, <class 'typing.Generic'>, <class 'object'>]

# Lines 370 to 373
>>> from Chapter_07.ch07_r03 import roller, Dice1, Dice2
>>> list(roller(Dice1, 1, samples=5))
[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)]
>>> list(roller(Dice2, 1, samples=5))
[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)]

# Lines 440 to 443
>>> from Chapter_07.ch07_r04 import count, counts
>>> from Chapter_07.ch07_r03 import Dice1
>>> d = Dice1(1)
>>> for _ in range(1000):
...     if sum(d.roll()) == 7: count('seven')
...     else: count('other')

# Lines 446 to 446
>>> print(counts())
[('other', 833), ('seven', 167)]

# Lines 470 to 476
>>> from Chapter_07.ch07_r04 import EventCounter
>>> c1 = EventCounter()
>>> c1.count('input')
>>> c2 = EventCounter()
>>> c2.count('input')
>>> c3 = EventCounter()
>>> c3.counts()
[('input', 2)]

# Lines 504 to 504
>>> data = [
...    ('2016-04-24 11:05:01,462', 'INFO', 'module1', 'Sample Message One'),
...    ('2016-04-24 11:06:02,624', 'DEBUG', 'module2', 'Debugging'),
...    ('2016-04-24 11:07:03,246', 'WARNING', 'module1', 'Something might have gone wrong')
... ]


# Lines 628 to 637
>>> from Chapter_07.ch07_r06a import make_card
>>> c1 = make_card(9, '♡')
>>> c2 = make_card(10, '♡')
>>> c1 < c2
True
>>> c1 == c1
True
>>> c1 == c2
False
>>> c1 > c2
False

# Lines 664 to 666
>>> from Chapter_07.ch07_r06a import make_deck
>>> deck = make_deck()
>>> len(deck)
48

# Lines 669 to 669
>>> deck[:8]
[ 9 ♠,  9 ♡,  9 ♢,  9 ♣, 10 ♠, 10 ♡, 10 ♢, 10 ♣]

# Lines 672 to 672
>>> deck[24:32]
[ 9 ♠,  9 ♡,  9 ♢,  9 ♣, 10 ♠, 10 ♡, 10 ♢, 10 ♣]

# Lines 675 to 678
>>> import random
>>> random.seed(4)
>>> random.shuffle(deck)
>>> sorted(deck[:12])
[ 9 ♣, 10 ♣,  J ♠,  J ♢,  J ♢,  Q ♠,  Q ♣,  K ♠,  K ♠,  K ♣,  A ♡,  A ♣]

# Lines 686 to 687
>>> c1 = make_card(9, '♡')
>>> c1 == 9
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[68]>", line 1, in <module>
    c1 == 9
  File "/Users/slott/Documents/Writing/Python/Python Cookbook 2e/Code/Chapter_07/ch07_r06a.py", line 20, in __eq__
    return (self.rank, self.suit) == (other.rank, other.suit)
AttributeError: 'int' object has no attribute 'rank'



# Lines 774 to 780
>>> from Chapter_07.ch07_r06b import make_deck, make_card, Hand
>>> import random
>>> random.seed(4)
>>> deck = make_deck()
>>> random.shuffle(deck)
>>> h = Hand(deck[:12])
>>> h.cards
[ 9 ♣, 10 ♣,  J ♠,  J ♢,  J ♢,  Q ♠,  Q ♣,  K ♠,  K ♠,  K ♣,  A ♡,  A ♣]

# Lines 784 to 785
>>> pinochle = Hand([make_card(11,'♢'), make_card(12,'♠')])
>>> pinochle <= h
True

# Lines 788 to 788
>>> sum(c.points() for c in h)
56

# Lines 848 to 848
>>> source = [
...    {'title': 'Eruption', 'writer': ['Emerson'], 'time': '2:43'},
...    {'title': 'Stones of Years', 'writer': ['Emerson', 'Lake'], 'time': '3:43'},
...    {'title': 'Iconoclast', 'writer': ['Emerson'], 'time': '1:16'},
...    {'title': 'Mass', 'writer': ['Emerson', 'Lake'], 'time': '3:09'},
...    {'title': 'Manticore', 'writer': ['Emerson'], 'time': '1:49'},
...    {'title': 'Battlefield', 'writer': ['Lake'], 'time': '3:57'},
...    {'title': 'Aquatarkus', 'writer': ['Emerson'], 'time': '3:54'}
... ]


# Lines 858 to 861
>>> from pprint import pprint

>>> data = source.copy()
>>> for item in data:
...     if 'Lake' in item['writer']:
...        print("remove", item['title'])
remove Stones of Years
remove Mass
remove Battlefield

# Lines 869 to 870
>>> data = source.copy()
>>> for index in range(len(data)): 
...    if 'Lake' in data[index]['writer']:
...       del data[index]
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[84]>", line 2, in <module>
    if 'Lake' in data[index]['writer']:
IndexError: list index out of range

# Lines 886 to 886
>>> def index(data):
...    for i in range(len(data)):
...        if 'Lake' in data[i]['writer']:
...            return i

# Lines 890 to 892
>>> data = source.copy()
>>> position = index(data)
>>> while position:
...    del data[position]  # or data.pop(position)
...    position = index(data)


# Lines 919 to 920
>>> i = 0
>>> while i != len(data):
...    if 'Lake' in data[i]['writer']:
...        del data[i]
...    else:
...        i += 1

# Lines 925 to 925
>>> pprint(data)
[{'time': '2:43', 'title': 'Eruption', 'writer': ['Emerson']},
 {'time': '1:16', 'title': 'Iconoclast', 'writer': ['Emerson']},
 {'time': '1:49', 'title': 'Manticore', 'writer': ['Emerson']},
 {'time': '3:54', 'title': 'Aquatarkus', 'writer': ['Emerson']}]

# Lines 944 to 944
>>> data = [item for item in source if not('Lake' in item['writer'])]


# Lines 947 to 947
>>> data = list(filter(lambda item: not('Lake' in item['writer']), source))


