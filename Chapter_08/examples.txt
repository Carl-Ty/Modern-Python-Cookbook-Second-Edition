"""Python Cookbook

Chapter 8, Examples from the text.
"""

# Lines 40 to 40
>>> data = [
...    ('2016-04-24 11:05:01,462', 'INFO', 'module1', 'Sample Message One'),
...    ('2016-04-24 11:06:02,624', 'DEBUG', 'module2', 'Debugging'),
...    ('2016-04-24 11:07:03,246', 'WARNING', 'module1', 'Something might have gone wrong')
... ]


# Lines 84 to 86
>>> from pprint import pprint
>>> from Chapter_08.ch08_r01 import parse_date_iter
>>> for item in parse_date_iter(data):
...     pprint(item)
(datetime.datetime(2016, 4, 24, 11, 5, 1, 462000),
 'INFO',
 'module1',
 'Sample Message One')
(datetime.datetime(2016, 4, 24, 11, 6, 2, 624000),
 'DEBUG',
 'module2',
 'Debugging')
(datetime.datetime(2016, 4, 24, 11, 7, 3, 246000),
 'WARNING',
 'module1',
 'Something might have gone wrong')

# Lines 102 to 102
>>> details = list(parse_date_iter(data))


# Lines 105 to 105
>>> parse_date_iter(data)  # doctest: +ELLIPSIS
<generator object parse_date_iter at 0x...>

# Lines 128 to 128
>>> def gen_func():
...     print("pre-yield")
...     yield 1
...     print("post-yield")
...     yield 2


# Lines 134 to 135
>>> y = gen_func()
>>> next(y)
pre-yield
1

# Lines 138 to 138
>>> next(y)
post-yield
2

# Lines 143 to 143
>>> next(y)
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[10]>", line 1, in <module>
    next(y)
StopIteration

# Lines 228 to 230
>>> from pathlib import Path
>>> import csv
>>> with Path('data/fuel.csv').open() as source_file:
...    reader = csv.reader(source_file)
...    log_rows = list(reader)

# Lines 233 to 235
>>> log_rows[0]
['date', 'engine on', 'fuel height']
>>> log_rows[-1]
['', "choppy -- anchor in jackson's creek", '']

# Lines 424 to 424
>>> data = [
...    ('2016-04-24 11:05:01,462', 'INFO', 'module1', 'Sample Message One'),
...    ('2016-04-24 11:06:02,624', 'DEBUG', 'module2', 'Debugging'),
...    ('2016-04-24 11:07:03,246', 'WARNING', 'module1', 'Something might have gone wrong')
... ]


# Lines 486 to 486
>>> def mul(a, b):
...    return a*b


# Lines 489 to 492
>>> list_1 = [2, 3, 5, 7]
>>> list_2 = [11, 13, 17, 23]

>>> list(map(mul, list_1, list_2))
[22, 39, 85, 161]

# Lines 496 to 498
>>> def bundle(*args):
...     return args
>>> list(map(bundle, list_1, list_2))
[(2, 11), (3, 13), (5, 17), (7, 23)]

# Lines 502 to 502
>>> list(zip(list_1, list_2))
[(2, 11), (3, 13), (5, 17), (7, 23)]

# Lines 563 to 564
>>> from Chapter_08.ch08_r02 import row_merge, log_rows
>>> pprint(list(row_merge(log_rows)))
[['date',
  'engine on',
  'fuel height',
  '',
  'engine off',
  'fuel height',
  '',
  'Other notes',
  ''],
 ['10/25/13',
  '08:24:00 AM',
  '29',
  '',
  '01:15:00 PM',
  '27',
  '',
  "calm seas -- anchor solomon's island",
  ''],
 ['10/26/13',
  '09:12:00 AM',
  '27',
  '',
  '06:25:00 PM',
  '22',
  '',
  "choppy -- anchor in jackson's creek",
  '']]

# Lines 685 to 685
>>> from functools import reduce


# Lines 688 to 688
>>> def mul(a, b):
...     return a * b


# Lines 692 to 692
>>> def prod(values):
...    return reduce(mul, values, 1)


# Lines 701 to 701
>>> prod(range(1, 5+1))
120

# Lines 706 to 706
>>> def factorial(n):
...    return prod(range(1, n+1))


# Lines 709 to 709
>>> factorial(52)
80658175170943878571660636856403766975289505440883277824000000000000

# Lines 713 to 713
>>> factorial(52)//(factorial(5)*factorial(52-5))
2598960

# Lines 730 to 731
>>> add = lambda a, b: a + b
>>> mul = lambda a, b: a * b


# Lines 734 to 734
>>> def prod2(values):
...     return reduce(lambda a, b: a*b, values, 1)


# Lines 767 to 770
>>> typical_iterator = iter([0, 1, 2, 3, 4])
>>> sum(typical_iterator)
10
>>> sum(typical_iterator)
0

>>> from Chapter_08.ch08_r06 import (
... clean_data, row_merge, total_fuel, avg_fuel_per_hour)

# Lines 810 to 810
>>> round(total_fuel(clean_data(row_merge(log_rows))), 3)
7.0

# Lines 902 to 902
>>> round(avg_fuel_per_hour(
...    clean_data(row_merge(log_rows))), 3)
0.48

# Lines 989 to 994
>>> from itertools import takewhile
>>> n = 13
>>> list(takewhile(lambda i: n % i != 0, range(2, 4)))
[2, 3]
>>> n = 15
>>> list(takewhile(lambda i: n % i != 0, range(2, 4)))
[2]

# Lines 1137 to 1139
>>> from operator import mul
>>> from functools import reduce
>>> prod = lambda x: reduce(mul, x, 1)


# Lines 1142 to 1143
>>> factorial = lambda x: prod(range(2,x+1))
>>> factorial(5)
120

>>> from Chapter_08.ch08_r09 import rank_by_y, cleanse, get, text_1

# Lines 1252 to 1253
>>> data = rank_by_y(cleanse(get(text_1)))
>>> pprint(list(data))
[RankYDataPair(y_rank=1, pair=DataPair(x=4.0, y=4.26)),
 RankYDataPair(y_rank=2, pair=DataPair(x=7.0, y=4.82)),
 RankYDataPair(y_rank=3, pair=DataPair(x=5.0, y=5.68)),
 RankYDataPair(y_rank=4, pair=DataPair(x=8.0, y=6.95)),
 RankYDataPair(y_rank=5, pair=DataPair(x=6.0, y=7.24)),
 RankYDataPair(y_rank=6, pair=DataPair(x=13.0, y=7.58)),
 RankYDataPair(y_rank=7, pair=DataPair(x=10.0, y=8.04)),
 RankYDataPair(y_rank=8, pair=DataPair(x=11.0, y=8.33)),
 RankYDataPair(y_rank=9, pair=DataPair(x=9.0, y=8.81)),
 RankYDataPair(y_rank=10, pair=DataPair(x=14.0, y=9.96)),
 RankYDataPair(y_rank=11, pair=DataPair(x=12.0, y=10.84))]

>>> from Chapter_08.ch08_r10 import find_path, document

# Lines 1348 to 1348
>>> list(find_path('array_item_value2', document))
[['array', 1, 'array_item_key2']]

# Lines 1353 to 1353
>>> list(find_path('value', document))
[['array', 0, 'array_item_key1'], ['field2'], ['object', 'attribute1']]

