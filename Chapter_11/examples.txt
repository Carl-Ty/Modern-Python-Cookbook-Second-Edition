"""Python Cookbook

Chapter 11, Examples from the text.
"""

>>> from Chapter_11.ch11_r01 import binom

# Lines 101 to 101
>>> binom(52, 5)
2598960

>>> from Chapter_11.ch11_r01 import Summary

# Lines 140 to 146
>>> s = Summary()
>>> s.add(8)
>>> s.add(9)
>>> s.add(9)
>>> round(s.mean, 2)
8.67
>>> s.median
9

# Lines 152 to 152
>>> print(str(s))
mean = 8.67
median = 9

# Lines 181 to 185
>>> binom(52, 5)
2598960
>>> binom(52, 0)
1
>>> binom(52, 52)
1

# Lines 196 to 196
>>> binom(0, 0)
1

# Lines 227 to 227
>>> binom(52, 5)
2598960

# Lines 254 to 254
>>> binom(5, 52)
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[15]>", line 1, in <module>
    binom(5, 52)
  File "/Users/slott/Documents/Writing/Python/Python Cookbook 2e/Code/Chapter_11/ch11_r01.py", line 24, in binom
    return factorial(n) // (factorial(k) * factorial(n-k))
ValueError: factorial() not defined for negative values


# Lines 277 to 277
>>> binom(52, -5)  # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
ValueError: factorial() not defined for negative values

# Lines 359 to 360
>>> from io import StringIO
>>> mock_file = StringIO('''lat,lon,date,time
... 32.8321,-79.9338,2012-11-27,09:15:00
... ''')

>>> from Chapter_11.ch11_r03 import raw_reader

# Lines 363 to 363
>>> row_iter = iter(raw_reader(mock_file))

# Lines 368 to 368
>>> row = next(row_iter)
>>> row
{'lat': '32.8321', 'lon': '-79.9338', 'date': '2012-11-27', 'time': '09:15:00'}

# Lines 372 to 373
>>> row = next(row_iter)
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[23]>", line 1, in <module>
    row = next(row_iter)
StopIteration

>>> sorted(row.items())  # doctest: +NORMALIZE_WHITESPACE
[('date', '2012-11-27'), ('lat', '32.8321'), ('lon', '-79.9338'), ('time', '09:15:00')]

>>> from math import erf, sqrt
>>> def pdf(n):
...     """
...     The cumulative distribution function for the standard normal
...     distribution.
...
...     :param n: number of standard deviations
...     :returns: cumulative fraction of values below n.
...
...     Examples:
...     """
...     return (1+erf(n/sqrt(2)))/2

# Lines 400 to 404
>>> round(pdf(0), 3)
0.5
>>> round(pdf(-1), 3)
0.159
>>> round(pdf(+1), 3)
0.841

# Lines 412 to 418
>>> row['date']
'2012-11-27'
>>> row['lat']
'32.8321'
>>> row['lon']
'-79.9338'
>>> row['time']
'09:15:00'

# Lines 422 to 422
>>> sorted(row.items())
[('date', '2012-11-27'), ('lat', '32.8321'), ('lon', '-79.9338'), ('time', '09:15:00')]


# Lines 629 to 637
>>> s = Summary()
>>> s.add(8)
>>> s.add(9)
>>> s.add(9)
>>> round(s.mean, 2)
8.67
>>> s.median
9
>>> print(str(s))
mean = 8.67
median = 9

# Lines 791 to 795
>>> from unittest.mock import *
>>> dumb_function = Mock(return_value=12)
>>> dumb_function(9)
12
>>> dumb_function(18)
12

# Lines 799 to 799
>>> dumb_function.mock_calls
[call(9), call(18)]

# Lines 802 to 802
>>> dumb_function.assert_called_with(18)


# Lines 805 to 805
>>> dumb_function.assert_has_calls([call(9), call(18)])


# Lines 890 to 896
>>> from unittest.mock import *
>>> dumb_function = Mock(side_effect=[11,13])
>>> dumb_function(23)
11
>>> dumb_function(29)
13
>>> dumb_function(31)
Traceback (most recent call last):
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/doctest.py", line 1328, in __run
    compileflags, 1), test.globs)
  File "<doctest examples.txt[53]>", line 1, in <module>
    dumb_function(31)
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/unittest/mock.py", line 965, in __call__
    return _mock_self._mock_call(*args, **kwargs)
  File "/Users/slott/miniconda3/envs/cookbook/lib/python3.8/unittest/mock.py", line 1027, in _mock_call
    result = next(effect)
StopIteration

